{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror FundMe__NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\r\n    // Mapping to store the amount funded by each address\r\n    mapping(address => uint256) private s_addressToAmountFunded;\r\n\r\n    // Array to store the addresses of contributors (funders)\r\n    address[] private s_funders;\r\n\r\n    // Owner of the contract, set at deployment\r\n    address private immutable i_owner;\r\n\r\n    // Minimum amount in USD required to contribute\r\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\r\n\r\n    // Chainlink Price Feed interface\r\n    AggregatorV3Interface public s_priceFeed;\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param priceFeedAddress The address of the Chainlink Price Feed contract.\r\n     */\r\n    constructor(address priceFeedAddress) {\r\n        // Set the contract deployer as the owner\r\n        i_owner = msg.sender;\r\n\r\n        // Initialize the Chainlink Price Feed\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function to accept ETH contributions.\r\n     */\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function to accept ETH contributions.\r\n     */\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    /**\r\n     * @dev Contribute ETH to the crowdfunding campaign.\r\n     */\r\n    function fund() public payable {\r\n        // Check if the contributed amount meets the minimum USD requirement\r\n        require(\r\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\r\n            \"You need to spend more ETH!\"\r\n        );\r\n\r\n        // Update the amount funded by the contributor\r\n        s_addressToAmountFunded[msg.sender] += msg.value;\r\n\r\n        // Add the contributor to the list of funders\r\n        s_funders.push(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to restrict a function to only the owner of the contract.\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all funds from the contract, available only to the owner.\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        // Iterate through funders and reset their funded amounts\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < s_funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = s_funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        // Clear the list of funders\r\n        s_funders = new address[](0);\r\n\r\n        // // transfer\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n        // // send\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\");\r\n\r\n        // call\r\n        // Transfer the contract's balance to the owner\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all funds from the contract more efficiently, available only to the owner.\r\n     */\r\n    function cheaperWithdraw() public onlyOwner {\r\n        // Use a memory array to store funders and iterate through it\r\n        address[] memory funders = s_funders;\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < s_funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n\r\n        // Clear the list of funders\r\n        s_funders = new address[](0);\r\n\r\n        // Transfer the contract's balance to the owner\r\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    // View/Pure functions to retrieve information from the contract\r\n\r\n    /**\r\n     * @dev View function to get the owner of the contract.\r\n     * @return The address of the contract owner.\r\n     */\r\n    function getOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev View function to get the address of a funder at a specific index.\r\n     * @param index The index of the funder in the list.\r\n     * @return The address of the funder.\r\n     */\r\n    function getFunder(uint256 index) public view returns (address) {\r\n        return s_funders[index];\r\n    }\r\n\r\n    /**\r\n     * @dev View function to get the amount funded by a specific address.\r\n     * @param funder The address of the funder.\r\n     * @return The amount funded by the specified address.\r\n     */\r\n    function getAddressToAmountFunded(\r\n        address funder\r\n    ) public view returns (uint256) {\r\n        return s_addressToAmountFunded[funder];\r\n    }\r\n\r\n    /**\r\n     * @dev View function to get the Chainlink Price Feed contract.\r\n     * @return The address of the Chainlink Price Feed contract.\r\n     */\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return s_priceFeed;\r\n    }\r\n}\r\n\r\n// Concepts we didn't cover yet (will cover in later sections)\r\n// 1. Enum\r\n// 2. Events\r\n// 3. Try / Catch\r\n// 4. Function Selector\r\n// 5. abi.encode / decode\r\n// 6. Hash with keccak256\r\n// 7. Yul / Assembly\r\n\r\n// Explainer from: https://solidity-by-example.org/fallback/\r\n// Ether is sent to contract\r\n//      is msg.data empty?\r\n//          /   \\\r\n//         yes  no\r\n//         /     \\\r\n//    receive()?  fallback()\r\n//     /   \\\r\n//   yes   no\r\n//  /        \\\r\n//receive()  fallback()\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// Why is this a library and not abstract?\r\n// Why not an interface?\r\nlibrary PriceConverter {\r\n    // We could make this public, but then we'd have to deploy it\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n        // or (Both will do the same thing)\r\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\r\n    }\r\n\r\n    // 1000000000\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        // or (Both will do the same thing)\r\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\r\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}