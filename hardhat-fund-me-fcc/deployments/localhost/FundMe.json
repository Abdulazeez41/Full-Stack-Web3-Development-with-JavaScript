{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6e103284f6e163ded97022b366e32e738a9893875b2a0c39541e1593130eea88",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1021653",
    "logsBloom": "0x
    "blockHash": "0x885eefc5bd9c9c29af9b74a1b0b85ab3bdb6b49540cbe2e40114cf85c62cc950",
    "transactionHash": "0x6e103284f6e163ded97022b366e32e738a9893875b2a0c39541e1593130eea88",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1021653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "783fe185394939bd596f1a216948c9e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cheaperWithdraw()\":{\"details\":\"Withdraw all funds from the contract more efficiently, available only to the owner.\"},\"constructor\":{\"details\":\"Contract constructor.\",\"params\":{\"priceFeedAddress\":\"The address of the Chainlink Price Feed contract.\"}},\"fund()\":{\"details\":\"Contribute ETH to the crowdfunding campaign.\"},\"getAddressToAmountFunded(address)\":{\"details\":\"View function to get the amount funded by a specific address.\",\"params\":{\"funder\":\"The address of the funder.\"},\"returns\":{\"_0\":\"The amount funded by the specified address.\"}},\"getFunder(uint256)\":{\"details\":\"View function to get the address of a funder at a specific index.\",\"params\":{\"index\":\"The index of the funder in the list.\"},\"returns\":{\"_0\":\"The address of the funder.\"}},\"getOwner()\":{\"details\":\"View function to get the owner of the contract.\",\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"getPriceFeed()\":{\"details\":\"View function to get the Chainlink Price Feed contract.\",\"returns\":{\"_0\":\"The address of the Chainlink Price Feed contract.\"}},\"withdraw()\":{\"details\":\"Withdraw all funds from the contract, available only to the owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    // Mapping to store the amount funded by each address\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n\\r\\n    // Array to store the addresses of contributors (funders)\\r\\n    address[] private s_funders;\\r\\n\\r\\n    // Owner of the contract, set at deployment\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    // Minimum amount in USD required to contribute\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n\\r\\n    // Chainlink Price Feed interface\\r\\n    AggregatorV3Interface public s_priceFeed;\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor.\\r\\n     * @param priceFeedAddress The address of the Chainlink Price Feed contract.\\r\\n     */\\r\\n    constructor(address priceFeedAddress) {\\r\\n        // Set the contract deployer as the owner\\r\\n        i_owner = msg.sender;\\r\\n\\r\\n        // Initialize the Chainlink Price Feed\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function to accept ETH contributions.\\r\\n     */\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function to accept ETH contributions.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Contribute ETH to the crowdfunding campaign.\\r\\n     */\\r\\n    function fund() public payable {\\r\\n        // Check if the contributed amount meets the minimum USD requirement\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n\\r\\n        // Update the amount funded by the contributor\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n\\r\\n        // Add the contributor to the list of funders\\r\\n        s_funders.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to restrict a function to only the owner of the contract.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all funds from the contract, available only to the owner.\\r\\n     */\\r\\n    function withdraw() public onlyOwner {\\r\\n        // Iterate through funders and reset their funded amounts\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        // Clear the list of funders\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        // // transfer\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        // // send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n\\r\\n        // call\\r\\n        // Transfer the contract's balance to the owner\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all funds from the contract more efficiently, available only to the owner.\\r\\n     */\\r\\n    function cheaperWithdraw() public onlyOwner {\\r\\n        // Use a memory array to store funders and iterate through it\\r\\n        address[] memory funders = s_funders;\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n\\r\\n        // Clear the list of funders\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        // Transfer the contract's balance to the owner\\r\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    // View/Pure functions to retrieve information from the contract\\r\\n\\r\\n    /**\\r\\n     * @dev View function to get the owner of the contract.\\r\\n     * @return The address of the contract owner.\\r\\n     */\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to get the address of a funder at a specific index.\\r\\n     * @param index The index of the funder in the list.\\r\\n     * @return The address of the funder.\\r\\n     */\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to get the amount funded by a specific address.\\r\\n     * @param funder The address of the funder.\\r\\n     * @return The amount funded by the specified address.\\r\\n     */\\r\\n    function getAddressToAmountFunded(\\r\\n        address funder\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to get the Chainlink Price Feed contract.\\r\\n     * @return The address of the Chainlink Price Feed contract.\\r\\n     */\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Concepts we didn't cover yet (will cover in later sections)\\r\\n// 1. Enum\\r\\n// 2. Events\\r\\n// 3. Try / Catch\\r\\n// 4. Function Selector\\r\\n// 5. abi.encode / decode\\r\\n// 6. Hash with keccak256\\r\\n// 7. Yul / Assembly\\r\\n\\r\\n// Explainer from: https://solidity-by-example.org/fallback/\\r\\n// Ether is sent to contract\\r\\n//      is msg.data empty?\\r\\n//          /   \\\\\\r\\n//         yes  no\\r\\n//         /     \\\\\\r\\n//    receive()?  fallback()\\r\\n//     /   \\\\\\r\\n//   yes   no\\r\\n//  /        \\\\\\r\\n//receive()  fallback()\\r\\n\",\"keccak256\":\"0x2af3f63b90b16cf4502662876e9e70cdf8c7490fda53983673945d7b0fda592e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x353591c2f779dc366861f171b184ecd8f744241387b324c562d8058702d227c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129d3803806200129d83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161111d62000180600039600081816103ab015281816105fa0152818161064a0152610844015261111d6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b2f565b61033b565b6040516100d79190610b75565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610bef565b60405180910390f35b34801561011757600080fd5b506101206103a9565b005b34801561012e57600080fd5b506101376105e9565b6040516101449190610b75565b60405180910390f35b34801561015957600080fd5b506101626105f6565b60405161016f9190610c19565b60405180910390f35b34801561018457600080fd5b5061018d61061e565b60405161019a9190610bef565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c2610648565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c60565b610910565b6040516101f89190610c19565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095890919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610cea565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d39565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104d95760006001828154811061045457610453610d6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104d190610d9c565b915050610431565b50600067ffffffffffffffff8111156104f5576104f4610de4565b5b6040519080825280602002602001820160405280156105235781602001602082028036833780820191505090505b5060019080519060200190610539929190610a25565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056090610e44565b60006040518083038185875af1925050503d806000811461059d576040519150601f19603f3d011682016040523d82523d6000602084013e6105a2565b606091505b50509050806105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90610ea5565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610707575b5050505050905060005b6001805490508110156107df57600082828151811061077d5761077c610d6d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d790610d9c565b91505061075b565b50600067ffffffffffffffff8111156107fb576107fa610de4565b5b6040519080825280602002602001820160405280156108295781602001602082028036833780820191505090505b506001908051906020019061083f929190610a25565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088690610e44565b60006040518083038185875af1925050503d80600081146108c3576040519150601f19603f3d011682016040523d82523d6000602084013e6108c8565b606091505b505090508061090c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090390610ea5565b60405180910390fd5b5050565b60006001828154811061092657610925610d6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096483610994565b90506000670de0b6b3a7640000858361097d9190610ec5565b6109879190610f36565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190610ff4565b5050509150506402540be40081610a1d919061106f565b915050919050565b828054828255906000526020600020908101928215610a9e579160200282015b82811115610a9d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a45565b5b509050610aab9190610aaf565b5090565b5b80821115610ac8576000816000905550600101610ab0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610afc82610ad1565b9050919050565b610b0c81610af1565b8114610b1757600080fd5b50565b600081359050610b2981610b03565b92915050565b600060208284031215610b4557610b44610acc565b5b6000610b5384828501610b1a565b91505092915050565b6000819050919050565b610b6f81610b5c565b82525050565b6000602082019050610b8a6000830184610b66565b92915050565b6000819050919050565b6000610bb5610bb0610bab84610ad1565b610b90565b610ad1565b9050919050565b6000610bc782610b9a565b9050919050565b6000610bd982610bbc565b9050919050565b610be981610bce565b82525050565b6000602082019050610c046000830184610be0565b92915050565b610c1381610af1565b82525050565b6000602082019050610c2e6000830184610c0a565b92915050565b610c3d81610b5c565b8114610c4857600080fd5b50565b600081359050610c5a81610c34565b92915050565b600060208284031215610c7657610c75610acc565b5b6000610c8484828501610c4b565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610cd4601b83610c8d565b9150610cdf82610c9e565b602082019050919050565b60006020820190508181036000830152610d0381610cc7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4482610b5c565b9150610d4f83610b5c565b9250828201905080821115610d6757610d66610d0a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610da782610b5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dd957610dd8610d0a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e2e600083610e13565b9150610e3982610e1e565b600082019050919050565b6000610e4f82610e21565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e8f600b83610c8d565b9150610e9a82610e59565b602082019050919050565b60006020820190508181036000830152610ebe81610e82565b9050919050565b6000610ed082610b5c565b9150610edb83610b5c565b9250828202610ee981610b5c565b91508282048414831517610f0057610eff610d0a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4182610b5c565b9150610f4c83610b5c565b925082610f5c57610f5b610f07565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8681610f67565b8114610f9157600080fd5b50565b600081519050610fa381610f7d565b92915050565b6000819050919050565b610fbc81610fa9565b8114610fc757600080fd5b50565b600081519050610fd981610fb3565b92915050565b600081519050610fee81610c34565b92915050565b600080600080600060a086880312156110105761100f610acc565b5b600061101e88828901610f94565b955050602061102f88828901610fca565b945050604061104088828901610fdf565b935050606061105188828901610fdf565b925050608061106288828901610f94565b9150509295509295909350565b600061107a82610fa9565b915061108583610fa9565b925082820261109381610fa9565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110cb576110ca610d0a565b5b82820584148315176110e0576110df610d0a565b5b509291505056fea264697066735822122028103a17f596b253e0120ef5b1167f7e959fdf67b762a791680ee68288c9e74c64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b2f565b61033b565b6040516100d79190610b75565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610bef565b60405180910390f35b34801561011757600080fd5b506101206103a9565b005b34801561012e57600080fd5b506101376105e9565b6040516101449190610b75565b60405180910390f35b34801561015957600080fd5b506101626105f6565b60405161016f9190610c19565b60405180910390f35b34801561018457600080fd5b5061018d61061e565b60405161019a9190610bef565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c2610648565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c60565b610910565b6040516101f89190610c19565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095890919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610cea565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d39565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104d95760006001828154811061045457610453610d6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104d190610d9c565b915050610431565b50600067ffffffffffffffff8111156104f5576104f4610de4565b5b6040519080825280602002602001820160405280156105235781602001602082028036833780820191505090505b5060019080519060200190610539929190610a25565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056090610e44565b60006040518083038185875af1925050503d806000811461059d576040519150601f19603f3d011682016040523d82523d6000602084013e6105a2565b606091505b50509050806105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90610ea5565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610707575b5050505050905060005b6001805490508110156107df57600082828151811061077d5761077c610d6d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d790610d9c565b91505061075b565b50600067ffffffffffffffff8111156107fb576107fa610de4565b5b6040519080825280602002602001820160405280156108295781602001602082028036833780820191505090505b506001908051906020019061083f929190610a25565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088690610e44565b60006040518083038185875af1925050503d80600081146108c3576040519150601f19603f3d011682016040523d82523d6000602084013e6108c8565b606091505b505090508061090c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090390610ea5565b60405180910390fd5b5050565b60006001828154811061092657610925610d6d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096483610994565b90506000670de0b6b3a7640000858361097d9190610ec5565b6109879190610f36565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190610ff4565b5050509150506402540be40081610a1d919061106f565b915050919050565b828054828255906000526020600020908101928215610a9e579160200282015b82811115610a9d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a45565b5b509050610aab9190610aaf565b5090565b5b80821115610ac8576000816000905550600101610ab0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610afc82610ad1565b9050919050565b610b0c81610af1565b8114610b1757600080fd5b50565b600081359050610b2981610b03565b92915050565b600060208284031215610b4557610b44610acc565b5b6000610b5384828501610b1a565b91505092915050565b6000819050919050565b610b6f81610b5c565b82525050565b6000602082019050610b8a6000830184610b66565b92915050565b6000819050919050565b6000610bb5610bb0610bab84610ad1565b610b90565b610ad1565b9050919050565b6000610bc782610b9a565b9050919050565b6000610bd982610bbc565b9050919050565b610be981610bce565b82525050565b6000602082019050610c046000830184610be0565b92915050565b610c1381610af1565b82525050565b6000602082019050610c2e6000830184610c0a565b92915050565b610c3d81610b5c565b8114610c4857600080fd5b50565b600081359050610c5a81610c34565b92915050565b600060208284031215610c7657610c75610acc565b5b6000610c8484828501610c4b565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610cd4601b83610c8d565b9150610cdf82610c9e565b602082019050919050565b60006020820190508181036000830152610d0381610cc7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4482610b5c565b9150610d4f83610b5c565b9250828201905080821115610d6757610d66610d0a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610da782610b5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dd957610dd8610d0a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e2e600083610e13565b9150610e3982610e1e565b600082019050919050565b6000610e4f82610e21565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e8f600b83610c8d565b9150610e9a82610e59565b602082019050919050565b60006020820190508181036000830152610ebe81610e82565b9050919050565b6000610ed082610b5c565b9150610edb83610b5c565b9250828202610ee981610b5c565b91508282048414831517610f0057610eff610d0a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4182610b5c565b9150610f4c83610b5c565b925082610f5c57610f5b610f07565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8681610f67565b8114610f9157600080fd5b50565b600081519050610fa381610f7d565b92915050565b6000819050919050565b610fbc81610fa9565b8114610fc757600080fd5b50565b600081519050610fd981610fb3565b92915050565b600081519050610fee81610c34565b92915050565b600080600080600060a086880312156110105761100f610acc565b5b600061101e88828901610f94565b955050602061102f88828901610fca565b945050604061104088828901610fdf565b935050606061105188828901610fdf565b925050608061106288828901610f94565b9150509295509295909350565b600061107a82610fa9565b915061108583610fa9565b925082820261109381610fa9565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110cb576110ca610d0a565b5b82820584148315176110e0576110df610d0a565b5b509291505056fea264697066735822122028103a17f596b253e0120ef5b1167f7e959fdf67b762a791680ee68288c9e74c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cheaperWithdraw()": {
        "details": "Withdraw all funds from the contract more efficiently, available only to the owner."
      },
      "constructor": {
        "details": "Contract constructor.",
        "params": {
          "priceFeedAddress": "The address of the Chainlink Price Feed contract."
        }
      },
      "fund()": {
        "details": "Contribute ETH to the crowdfunding campaign."
      },
      "getAddressToAmountFunded(address)": {
        "details": "View function to get the amount funded by a specific address.",
        "params": {
          "funder": "The address of the funder."
        },
        "returns": {
          "_0": "The amount funded by the specified address."
        }
      },
      "getFunder(uint256)": {
        "details": "View function to get the address of a funder at a specific index.",
        "params": {
          "index": "The index of the funder in the list."
        },
        "returns": {
          "_0": "The address of the funder."
        }
      },
      "getOwner()": {
        "details": "View function to get the owner of the contract.",
        "returns": {
          "_0": "The address of the contract owner."
        }
      },
      "getPriceFeed()": {
        "details": "View function to get the Chainlink Price Feed contract.",
        "returns": {
          "_0": "The address of the Chainlink Price Feed contract."
        }
      },
      "withdraw()": {
        "details": "Withdraw all funds from the contract, available only to the owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}